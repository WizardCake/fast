model_lagged <- tibble::tibble(exg_lag = lags,
model_lagged = purrr::map(exg_lag, modelling_lagged,
df = df_treino,
var_y = var_y,
var_exogena = var_exogena,
dummy = dummy)) %>%
dplyr::select(model_lagged) %$%
purrr::reduce(model_lagged, dplyr::bind_cols)
models <- bind_cols(models, model_lagged)
}
models_lb <- tibble::tibble(lag_teste = 1:10,
models = list(models)) %>%
mutate(teste_lb = purrr::map2(models, lag_teste, ljung_box_auto)) %>%
select(-models) %>%
unnest(teste_lb)
models_passed <- models_lb %>%
dplyr::mutate(maior_p_5 = if_else(lb_pvalue >= .05, 1, 0)) %>%
dplyr::summarise(maior_p_5 = sum(maior_p_5),
.by = c(.model)) %>%
dplyr::filter(maior_p_5 == 10)
models <- models %>%
dplyr::select(tidyselect::any_of(models_passed$.model))
models_forecast <- models %>% forecast(new_data = df_basic %>%
tsibble::filter_index(testing ~ .))
models_acc <- models_forecast %>%
fabletools::accuracy(df_basic) %>%
dplyr::arrange(MAPE)
model_best_name <- models_acc %>%
dplyr::arrange(MAPE) %>%
dplyr::top_n(1, -MAPE) %>%
dplyr::pull(.model)
best_model <- select(models, {{model_best_name}})
best_prediction <- filter(models_forecast, .model == model_best_name)
acc_final <- arrange(models_acc, MAPE)
final <- list(best_model_name = model_best_name,
best_model = best_model,
best_prediction = best_prediction,
accuracies = acc_final,
df = df_basic,
y = predicted_var)
return(final)
}
liq_modelo <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')),
var_y = 'var_y',
var_exogena = c('contagem', 'nl'),
train_set = '2023-08'
)
liq_modelo
forecasting <- function(modelling_list, h = 12, new_data = NULL) {
var_y <- modelling_list$y
dplyr::rename(df, var_y = {{var_y}})
refitting <- modelling_list %$%
fabletools::refit(best_model, df)
if (is_tsibble(new_data) == TRUE) {
results <- fabletools::forecast(refitting,
new_data = new_data)
} else {
results <- fabletools::forecast(refitting,
h = h)
}
return(results)
}
liq_for <- forecasting(
liq_modelo,
new_data = teste %>% dplyr::left_join(
nl_for %>%
tsibble::as_tsibble() %>%
dplyr::select(mes, 'ne' = .mean)
) %>%
dplyr::filter(mes > tsibble::yearmonth('2023-11-01')) %>%
dplyr::mutate(nl = ne) %>%
dplyr::select(-ne)
)
View(df)
liq_modelo
nl_mod <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')),
var_y = 'nl',
dummy = 'quebra',
train_set = '2023-08'
)
df
nl_mod <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')),
var_y = 'nl',
dummy = 'quebra',
train_set = '2023-08'
)
rlang::last_trace()
modelling_complete <- function(df, var_y, var_exogena = NULL,
lags = 0, dummy = NULL,
train_set){
# Treino/Teste set
predicted_var <- var_y
df_basic <- df %>% dplyr::select(everything(), var_y = {{predicted_var}})
if (is.character(train_set) == T) {
training <- train_set
testing <- lubridate::ym(train_set) %m+% months(1) %>%
as.character()
} else if (is.numeric(train_set) == T) {
training <- train_set
testing <- train_set + 1
} else {
rlang::abort("the train_set arg must be a character for monthly data (YYYY-MM) or numeric for yearly data")
}
df_treino <- df %>%
tsibble::filter_index(. ~ training)
h <- df %>%
tsibble::filter_index(testing ~ .) %>%
dplyr::count() %>%
as.double()
# Diagnostico modelo basico
model_basic    <- modelling_basic(df_treino, var_y)
models <- model_basic
if (is.null(dummy) == FALSE){
model_dummy <- modelling_dummy(df_treino, var_y, dummy)
models <- bind_cols(models, model_dummy)
}
if (is.null(var_exogena) == FALSE) {
model_lagged <- tibble::tibble(exg_lag = lags,
model_lagged = purrr::map(exg_lag, modelling_lagged,
df = df_treino,
var_y = var_y,
var_exogena = var_exogena,
dummy = dummy)) %>%
dplyr::select(model_lagged) %$%
purrr::reduce(model_lagged, dplyr::bind_cols)
models <- bind_cols(models, model_lagged)
}
models_lb <- tibble::tibble(lag_teste = 1:10,
models = list(models)) %>%
mutate(teste_lb = purrr::map2(models, lag_teste, ljung_box_auto)) %>%
select(-models) %>%
unnest(teste_lb)
models_passed <- models_lb %>%
dplyr::mutate(maior_p_5 = if_else(lb_pvalue >= .05, 1, 0)) %>%
dplyr::summarise(maior_p_5 = sum(maior_p_5),
.by = c(.model)) %>%
dplyr::filter(maior_p_5 == 10)
models <- models %>%
dplyr::select(tidyselect::any_of(models_passed$.model))
models_forecast <- models %>% forecast(new_data = df_basic %>%
tsibble::filter_index(testing ~ .))
models_acc <- models_forecast %>%
fabletools::accuracy(df_basic) %>%
dplyr::arrange(MAPE)
model_best_name <- models_acc %>%
dplyr::arrange(MAPE) %>%
dplyr::top_n(1, -MAPE) %>%
dplyr::pull(.model)
best_model <- select(models, {{model_best_name}})
best_prediction <- filter(models_forecast, .model == model_best_name)
acc_final <- arrange(models_acc, MAPE)
final <- list(best_model_name = model_best_name,
best_model = best_model,
best_prediction = best_prediction,
accuracies = acc_final,
df = df_basic,
y = predicted_var)
return(final)
}
nl_for <- forecasting(nl_mod,
new_data = df %>%
dplyr::filter(mes > tsibble::yearmonth('2023-11-01')))
nl_mod <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')),
var_y = 'nl',
dummy = 'quebra',
train_set = '2023-08'
)
View(df)
nl_mod <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')) %>%
select(everything(), -var_y),
var_y = 'nl',
dummy = 'quebra',
train_set = '2023-08'
)
modelling_complete <- function(df, var_y, var_exogena = NULL,
lags = 0, dummy = NULL,
train_set){
# Treino/Teste set
predicted_var <- var_y
df_basic <- df %>% dplyr::select(everything(), var_y = {{var_y}})
if (is.character(train_set) == T) {
training <- train_set
testing <- lubridate::ym(train_set) %m+% months(1) %>%
as.character()
} else if (is.numeric(train_set) == T) {
training <- train_set
testing <- train_set + 1
} else {
rlang::abort("the train_set arg must be a character for monthly data (YYYY-MM) or numeric for yearly data")
}
df_treino <- df_basic %>%
tsibble::filter_index(. ~ training)
h <- df %>%
tsibble::filter_index(testing ~ .) %>%
dplyr::count() %>%
as.double()
# Diagnostico modelo basico
model_basic    <- modelling_basic(df_treino, var_y)
models <- model_basic
if (is.null(dummy) == FALSE){
model_dummy <- modelling_dummy(df_treino, var_y, dummy)
models <- bind_cols(models, model_dummy)
}
if (is.null(var_exogena) == FALSE) {
model_lagged <- tibble::tibble(exg_lag = lags,
model_lagged = purrr::map(exg_lag, modelling_lagged,
df = df_treino,
var_y = var_y,
var_exogena = var_exogena,
dummy = dummy)) %>%
dplyr::select(model_lagged) %$%
purrr::reduce(model_lagged, dplyr::bind_cols)
models <- bind_cols(models, model_lagged)
}
models_lb <- tibble::tibble(lag_teste = 1:10,
models = list(models)) %>%
mutate(teste_lb = purrr::map2(models, lag_teste, ljung_box_auto)) %>%
select(-models) %>%
unnest(teste_lb)
models_passed <- models_lb %>%
dplyr::mutate(maior_p_5 = if_else(lb_pvalue >= .05, 1, 0)) %>%
dplyr::summarise(maior_p_5 = sum(maior_p_5),
.by = c(.model)) %>%
dplyr::filter(maior_p_5 == 10)
models <- models %>%
dplyr::select(tidyselect::any_of(models_passed$.model))
models_forecast <- models %>% forecast(new_data = df_basic %>%
tsibble::filter_index(testing ~ .))
models_acc <- models_forecast %>%
fabletools::accuracy(df_basic) %>%
dplyr::arrange(MAPE)
model_best_name <- models_acc %>%
dplyr::arrange(MAPE) %>%
dplyr::top_n(1, -MAPE) %>%
dplyr::pull(.model)
best_model <- select(models, {{model_best_name}})
best_prediction <- filter(models_forecast, .model == model_best_name)
acc_final <- arrange(models_acc, MAPE)
final <- list(best_model_name = model_best_name,
best_model = best_model,
best_prediction = best_prediction,
accuracies = acc_final,
df = df_basic,
y = predicted_var)
return(final)
}
nl_mod <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')) %>%
select(everything(), -var_y),
var_y = 'nl',
dummy = 'quebra',
train_set = '2023-08'
)
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')) %>%
select(everything(), -var_y)
nl_mod <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')) %>%
select(everything(), -var_y),
var_y = 'nl',
dummy = 'quebra',
train_set = '2023-08'
)
modelling_complete <- function(df, var_y, var_exogena = NULL,
lags = 0, dummy = NULL,
train_set){
# Treino/Teste set
predicted_var <- var_y
df_basic <- df %>% dplyr::select(everything(), var_y = {{var_y}})
if (is.character(train_set) == T) {
training <- train_set
testing <- lubridate::ym(train_set) %m+% months(1) %>%
as.character()
} else if (is.numeric(train_set) == T) {
training <- train_set
testing <- train_set + 1
} else {
rlang::abort("the train_set arg must be a character for monthly data (YYYY-MM) or numeric for yearly data")
}
df_treino <- df_basic %>%
tsibble::filter_index(. ~ training)
h <- df %>%
tsibble::filter_index(testing ~ .) %>%
dplyr::count() %>%
as.double()
# Diagnostico modelo basico
model_basic    <- modelling_basic(df_treino, "var_y")
models <- model_basic
if (is.null(dummy) == FALSE){
model_dummy <- modelling_dummy(df_treino, "var_y", dummy)
models <- bind_cols(models, model_dummy)
}
if (is.null(var_exogena) == FALSE) {
model_lagged <- tibble::tibble(exg_lag = lags,
model_lagged = purrr::map(exg_lag, modelling_lagged,
df = df_treino,
var_y = "var_y",
var_exogena = var_exogena,
dummy = dummy)) %>%
dplyr::select(model_lagged) %$%
purrr::reduce(model_lagged, dplyr::bind_cols)
models <- bind_cols(models, model_lagged)
}
models_lb <- tibble::tibble(lag_teste = 1:10,
models = list(models)) %>%
mutate(teste_lb = purrr::map2(models, lag_teste, ljung_box_auto)) %>%
select(-models) %>%
unnest(teste_lb)
models_passed <- models_lb %>%
dplyr::mutate(maior_p_5 = if_else(lb_pvalue >= .05, 1, 0)) %>%
dplyr::summarise(maior_p_5 = sum(maior_p_5),
.by = c(.model)) %>%
dplyr::filter(maior_p_5 == 10)
models <- models %>%
dplyr::select(tidyselect::any_of(models_passed$.model))
models_forecast <- models %>% forecast(new_data = df_basic %>%
tsibble::filter_index(testing ~ .))
models_acc <- models_forecast %>%
fabletools::accuracy(df_basic) %>%
dplyr::arrange(MAPE)
model_best_name <- models_acc %>%
dplyr::arrange(MAPE) %>%
dplyr::top_n(1, -MAPE) %>%
dplyr::pull(.model)
best_model <- select(models, {{model_best_name}})
best_prediction <- filter(models_forecast, .model == model_best_name)
acc_final <- arrange(models_acc, MAPE)
final <- list(best_model_name = model_best_name,
best_model = best_model,
best_prediction = best_prediction,
accuracies = acc_final,
df = df_basic,
y = predicted_var)
return(final)
}
nl_mod <- modelling_complete(
df %>%
dplyr::filter(mes <= tsibble::yearmonth('2023-11-01')) %>%
select(everything(), -var_y),
var_y = 'nl',
dummy = 'quebra',
train_set = '2023-08'
)
nl_for <- forecasting(nl_mod,
new_data = df %>%
dplyr::filter(mes > tsibble::yearmonth('2023-11-01')))
nl_mod
modelling_complete <- function(df, var_y, var_exogena = NULL,
lags = 0, dummy = NULL,
train_set){
# Treino/Teste set
predicted_var <- var_y
df_basic <- df %>% dplyr::select(everything(), var_y = {{var_y}})
if (is.character(train_set) == T) {
training <- train_set
testing <- lubridate::ym(train_set) %m+% months(1) %>%
as.character()
} else if (is.numeric(train_set) == T) {
training <- train_set
testing <- train_set + 1
} else {
rlang::abort("the train_set arg must be a character for monthly data (YYYY-MM) or numeric for yearly data")
}
df_treino <- df_basic %>%
tsibble::filter_index(. ~ training)
h <- df %>%
tsibble::filter_index(testing ~ .) %>%
dplyr::count() %>%
as.double()
# Diagnostico modelo basico
model_basic    <- modelling_basic(df_treino, "var_y")
models <- model_basic
if (is.null(dummy) == FALSE){
model_dummy <- modelling_dummy(df_treino, "var_y", dummy)
models <- bind_cols(models, model_dummy)
}
if (is.null(var_exogena) == FALSE) {
model_lagged <- tibble::tibble(exg_lag = lags,
model_lagged = purrr::map(exg_lag, modelling_lagged,
df = df_treino,
var_y = "var_y",
var_exogena = var_exogena,
dummy = dummy)) %>%
dplyr::select(model_lagged) %$%
purrr::reduce(model_lagged, dplyr::bind_cols)
models <- bind_cols(models, model_lagged)
}
models_lb <- tibble::tibble(lag_teste = 1:10,
models = list(models)) %>%
mutate(teste_lb = purrr::map2(models, lag_teste, ljung_box_auto)) %>%
select(-models) %>%
unnest(teste_lb)
models_passed <- models_lb %>%
dplyr::mutate(maior_p_5 = if_else(lb_pvalue >= .05, 1, 0)) %>%
dplyr::summarise(maior_p_5 = sum(maior_p_5),
.by = c(.model)) %>%
dplyr::filter(maior_p_5 == 10)
models <- models %>%
dplyr::select(tidyselect::any_of(models_passed$.model))
models_forecast <- models %>% forecast(new_data = df_basic %>%
tsibble::filter_index(testing ~ .))
models_acc <- models_forecast %>%
fabletools::accuracy(df_basic) %>%
dplyr::arrange(MAPE)
model_best_name <- models_acc %>%
dplyr::arrange(MAPE) %>%
dplyr::top_n(1, -MAPE) %>%
dplyr::pull(.model)
best_model <- select(models, {{model_best_name}})
best_prediction <- filter(models_forecast, .model == model_best_name)
acc_final <- arrange(models_acc, MAPE)
final <- list(best_model_name = model_best_name,
best_model = best_model,
best_prediction = best_prediction,
accuracies = acc_final,
df = df_basic,
y = predicted_var)
return(final)
}
forecasting <- function(modelling_list, h = 12, new_data = NULL) {
refitting <- modelling_list %$%
fabletools::refit(best_model, df)
if (is_tsibble(new_data) == TRUE) {
results <- fabletools::forecast(refitting,
new_data = new_data)
} else {
results <- fabletools::forecast(refitting,
h = h)
}
return(results)
}
nl_for <- forecasting(nl_mod,
new_data = df %>%
dplyr::filter(mes > tsibble::yearmonth('2023-11-01')))
nl_for %>% autoplot(nl_mod$df)
df
df
nl_for
nl_for
View(nl_for)
liq_for <- forecasting(
liq_modelo,
new_data = nl_for %>%
rename(nl = .mean) %>%
tsibble::filter_index("2023-11" ~ .)
) #%>%
nl_for
liq_for <- forecasting(
liq_modelo,
new_data = nl_for %>%
select(mes, var_y, nl = .mean, contagem) %>%
tsibble::filter_index("2023-11" ~ .)
) #%>%
liq_for
liq_for %>%
autoplot(df)
monthly_test <- tsibble(data = ym("2020-01"))
library(fpp3)
library(tidyverse)
library(lubridate)
monthly_test <- tsibble(data = ym("2020-01") %m+% months(0:3))
monthly_test
# Trying monthly based test
quarter_test <- tsibble(data = yq("2020-01") + quarters(3))
# Trying monthly based test
quarter_test <- tsibble(data = yq("2020-01") + quarters(1))
yq("2020-01")
yearquarter("2020-01")
yearquarter("2020-01") + quarters(1)
yearquarter("2020-01") + 1
yearquarter("2020-q1") + quarters(1)
yearquarter("2020-Q1") + quarters(1)
yearquarter("2020-01") + quarters(1)
yearquarter("2020-01")
yearquarter("2020-01") + quarters(1)
yearquarter("2020-01") + 1
# Trying monthly based test
quarter_test <- tsibble(data = yq("2020-01") + 0:2)
# Trying monthly based test
quarter_test <- tsibble(data = yq("2020-01") + 0:15)
quarter_test
# Trying monthly based test
quarter_test <- tsibble(data = yearquarter("2020-01") + 0:15)
quarter_test
train_set <- yearquarter("2022-Q1")
train_set <- yearquarter("2022-01")
train_set
testing <- train_set + 1
testing
quarter_test %>%
filter_index(. ~ train_set)
quarter_test %>%
filter_index(. ~ as.character(train_set))
quarter_test %>%
filter_index(as.character(testing) ~ .)
testing <- (train_set + 1) %>% as.character()
testing
quarter_test %>%
filter_index(as.character(testing) ~ .)
source("FARM 0.9.2.0.r")
